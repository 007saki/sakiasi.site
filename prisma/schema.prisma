


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  about About[]
  tou TermsOfUse[]
  blog Blog[]
  application Application[]
  project Project[]
  references References[]
  experience Experience[]
  employer Employer[]
  education Education[]
  qualification Qualification[]
}

model About {
  id Int @id @default(autoincrement())
  title String
  content String
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade, onUpdate: Cascade)
  authorId Int
}

model TermsOfUse {
  id Int @id @default(autoincrement())
  title String
  content String?
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade, onUpdate: Cascade)
  authorId Int
}

model Blog {
  id Int @id @default(autoincrement())
  title String
  content String
  category String?
  published Boolean @default(false)
  user User? @relation(fields: [userId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  userId Int?
}

model Application {
  id Int @id @default(autoincrement())
  name String
  link String
  description String?
  user User? @relation(fields: [userId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  userId Int?
}

model Project {
  id Int @id @default(autoincrement())
  name String @unique
  description String?
  user User? @relation(fields: [userId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  userId Int?
}

model References {
  id Int @id @default(autoincrement())
  name String
  email String? @unique
  contact String?
  position String?
  employer String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int?
}

model Experience {
  id Int @id @default(autoincrement())
  startDate DateTime
  endDate DateTime?
  responsibilities String?
  images String?
  achievement String?
  user User? @relation(fields: [userId],references: [id], onDelete: Cascade, onUpdate: Cascade) 
  userId Int?
  employer Employer[]
}

model Employer {
  id Int @id @default(autoincrement())
  name String
  email String? @unique
  address String?
  contact String?
  experience Experience? @relation(fields: [experienceId],references: [id],onDelete: Cascade, onUpdate: Cascade)
  experienceId Int?
  user User? @relation(fields: [userId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  userId Int?
}

model Education {
  id Int @id @default(autoincrement())
  institution Institution[]
  startDate DateTime
  endDate DateTime?
  qualification Qualification[]
  user User? @relation(fields: [userId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  userId Int?
}

model Institution {
  id Int @id @default(autoincrement())
  name String @unique
  location String?
  certificate Qualification[]
  education Education? @relation(fields: [educationId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  educationId Int?
}

model Qualification {
  id Int @id @default(autoincrement())
  name String
  type QualificationType @default(PROFESSIONAL_CERTIFICATE)
  owner User? @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId Int?
  institute Institution? @relation(fields: [instituteId],references: [id],onDelete: Cascade, onUpdate: Cascade)
  instituteId Int?
  education Education? @relation(fields: [educationId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  educationId Int?
}

enum QualificationType {
  BACHELORS_DEGREE
  PROFESSIONAL_CERTIFICATE
}